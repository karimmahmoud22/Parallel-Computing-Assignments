%%cuda
#include <stdio.h>
#include <stdlib.h>

// Function to read matrix from file
void readMatrix(double *matrix, int rows, int cols, float value) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i * cols + j] = value;
        }
    }
}


__global__ void MatAdd(double *A, double *B, double *C, int rows, int cols)
{
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    int row = blockIdx.y * blockDim.y + threadIdx.y;

    if (col < cols && row < rows) {
        int index = row * cols + col;
        C[index] = A[index] + B[index];
    }
}

int main(int argc, char *argv[]) {

    printf("%s", argv[0]);
                                  
    int rows = 1000000;
    int cols = 10;

    // Allocate memory for matrices on host
    double *matrix1 = (double *)malloc(rows * cols * sizeof(double));
    double *matrix2 = (double *)malloc(rows * cols * sizeof(double));
    double *result = (double *)malloc(rows * cols * sizeof(double));

    // Read matrices from file
    readMatrix(matrix1, rows, cols, 1.1);
    readMatrix(matrix2, rows, cols, 2.3);

    // Allocate memory for matrices on device
    double *matrix1_d, *matrix2_d, *result_d;
    cudaMalloc((void**)&matrix1_d, sizeof(double) * cols * rows);
    cudaMalloc((void**)&matrix2_d, sizeof(double) * cols * rows);
    cudaMalloc((void**)&result_d, sizeof(double) * cols * rows);

    // Transfer data from host to device memory
    cudaMemcpy(matrix1_d, matrix1, sizeof(double) * cols * rows, cudaMemcpyHostToDevice);
    cudaMemcpy(matrix2_d, matrix2, sizeof(double) * cols * rows, cudaMemcpyHostToDevice);

    // Perform matrix addition
    // Kernel invocation with one block of N * N * 1 threads
    int numBlocks = 1;
    dim3 threadsPerBlock(rows, cols);
    MatAdd<<<numBlocks, threadsPerBlock>>>(matrix1_d, matrix2_d, result_d, rows, cols);

    // Transfer data from device to host memory
    cudaMemcpy(result, result_d, sizeof(double) * cols * rows, cudaMemcpyDeviceToHost);

    // Deallocate device memory
    cudaFree(matrix1_d);
    cudaFree(matrix2_d);
    cudaFree(result_d);

    // Free memory for matrices
    free(matrix1);
    free(matrix2);
    free(result);

    return 0;
}

!nvcc /tmp/tmptt345pl9/63930f0f-6b5a-425f-903b-4e647a293f8b/single_file.cu -o kernel1
!nvprof ./kernel1